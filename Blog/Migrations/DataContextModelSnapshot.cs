// <auto-generated />
using Blog.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Blog.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Blog.Models.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArticleCategoryID");

                    b.Property<string>("ArticleContent")
                        .IsRequired();

                    b.Property<string>("ArticleSummary")
                        .IsRequired();

                    b.Property<string>("ArticleTitle")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.HasKey("ArticleID");

                    b.HasIndex("ArticleCategoryID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Blog.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.HasKey("CategoryID");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = -1,
                            CategoryName = "未分类",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Blog.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CommentArticleArticleID");

                    b.Property<string>("CommentContent")
                        .IsRequired();

                    b.Property<int>("CommentUserUserID");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("CommentID");

                    b.HasIndex("CommentArticleArticleID");

                    b.HasIndex("CommentUserUserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Blog.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("UserRole");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("UserID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Blog.Models.Article", b =>
                {
                    b.HasOne("Blog.Models.Category", "ArticleCategory")
                        .WithMany()
                        .HasForeignKey("ArticleCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blog.Models.Comment", b =>
                {
                    b.HasOne("Blog.Models.Article", "CommentArticle")
                        .WithMany()
                        .HasForeignKey("CommentArticleArticleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Blog.Models.User", "CommentUser")
                        .WithMany()
                        .HasForeignKey("CommentUserUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
